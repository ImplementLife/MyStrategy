package draw;import lib.math.Vec2D;import javax.swing.*;import java.awt.*;import java.awt.image.BufferedImage;public final class ImageLoader {    private ImageLoader() {}    /*public static HashMap<TileSize, Image> getMapImage(String path) {        Image image = new ImageIcon(path).getImage();        Vector2D currentSize = new Vector2D();        currentSize.setX(image.getWidth(null));        currentSize.setY(image.getHeight(null));        HashMap<TileSize, Image> mapImage = new HashMap<>();        for (TileSize t : TileSize.values()) {            currentSize = Vector2D.scalar(currentSize, t.scalar);            mapImage.put(t, resize(currentSize, image));        }        return mapImage;    }    public static HashMap<TileSize, Image> getMapImage(String path, Vector2D standardSize) {        Image image = new ImageIcon(path).getImage();        Vector2D standard, currentSize;        if (standardSize == null) {            standard = new Vector2D(64, 64);        } else if (standardSize.getX() == 0 && standardSize.getY() == 0) {            standard = new Vector2D();            standard.setX(image.getWidth(null));            standard.setY(image.getHeight(null));        } else {            standard = standardSize;        }        HashMap<TileSize, Image> mapImage = new HashMap<>();        for (TileSize t : TileSize.values()) {            currentSize = Vector2D.scalar(standard, t.scalar);            mapImage.put(t, resize(currentSize, image));        }        return mapImage;    }*/    public static Image resize(Vec2D size, Image image) {        BufferedImage resizeImage = new BufferedImage(size.getIntX(), size.getIntY(), BufferedImage.TYPE_INT_ARGB);        Graphics2D g = resizeImage.createGraphics();        g.drawImage(image, 0, 0, size.getIntX(), size.getIntY(), null);        g.dispose();        return resizeImage;    }    public static Image resize(Vec2D size, String path) {        return resize(size, new ImageIcon(path).getImage());    }}